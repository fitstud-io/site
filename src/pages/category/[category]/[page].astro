---
import { getCollection } from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import HeroCard from "@components/HeroCard.astro";
import PostCard from "@components/CommonCard.astro";
import Pagination from "@components/Pagination.astro";
import { getCategoryMetadata } from "@consts";

export async function getStaticPaths() {
  const allPosts = await getCollection("posts", ({ data }) => {
    return data.draft !== true;
  });
  const uniqueCategory = [
    ...new Set(allPosts.map((post) => post.data.category).flat()),
  ];

  return uniqueCategory.flatMap((category) => {
    const filteredPosts = allPosts.filter((post) =>
      post.data.category.includes(category),
    );
    filteredPosts.sort(
      (a, b) =>
        new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf(),
    );

    const pageSize = 12;
    const totalPages = Math.ceil(filteredPosts.length / pageSize);

    return Array.from({ length: totalPages }, (_, index) => ({
      params: { category, page: (index + 1).toString() },
      props: {
        page: {
          data: filteredPosts.slice(index * pageSize, (index + 1) * pageSize),
          currentPage: index + 1,
          lastPage: totalPages,
        },
      },
    }));
  });
}

const params = Astro.params;
const { page } = Astro.props;
const { title, description } = getCategoryMetadata(params.category);
---

<BaseLayout title={title} description={description}>

  {/* <!-- Page Hero--> */}
  <div class="relative lg:sticky lg:top-28 lg:w-1/2">
    {page.data.length > 0 && <HeroCard post={page.data[0]} />}
  </div>

   {/* Page Articles */}
  <div class="mt-12 sm:mt-16 lg:ml-12 lg:mt-0 lg:w-1/2 xl:ml-16 py-10">
    <h1 class="text-2xl">Articles in: <span class="text-primary capitalize">{params.category}</span></h1>
    {page.data.slice(1, 3).map((post) => (
      <PostCard post={post} />
    ))}
    {page.data.slice(3).map((post) => (
      <PostCard post={post} />
    ))}

  <!-- <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
    {page.data.map((post) => <PostCard post={post} />)}
  </div> -->

  <Pagination
    currentPage={page.currentPage}
    lastPage={page.lastPage}
    urlPrev={page.currentPage > 1
      ? `/category/${params.category}/${page.currentPage - 1}`
      : null}
    urlNext={page.currentPage < page.lastPage
      ? `/category/${params.category}/${page.currentPage + 1}`
      : null}
    basePath={`/category/${params.category}`}
    maxDisplayedPages={5}
  />
</BaseLayout>
